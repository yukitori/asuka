@page "/"

<h1>生成组件</h1>
<p>在 Pages 文件夹中浏览应用的三个页面：主页、计数器和提取数据。 这些页面由 Razor 组件文件（Index.razor 、Counter.razor 和 FetchData.razor ）实现。</p>
<p>在“计数器”页上，选择“单击我” 按钮，在不刷新页面的情况下增加计数器值。 增加网页的计数器值通常需要编写 JavaScript。 通过 Blazor，可以改为编写 C#。</p>
<p>检查 Counter.razor 文件中 Counter 组件的实现。</p>
<p>使用 HTML 定义 Counter组件的 UI。 动态呈现逻辑（例如，循环、条件、表达式）是使用名为 Razor 的嵌入式 C# 语法添加的。 HTML 标记和 C# 呈现逻辑在构建时转换为组件类。 生成的 .NET 类的名称与文件名匹配。</p>
<p>组件类的成员在块中定义。 在块中，可以指定组件状态（属性、字段）和方法用于处理事件或定义其他组件逻辑。 然后，可以将这些成员用作组件呈现逻辑的一部分，并用于处理事件。选中“单击我” 按钮时：</p>
<ul>
    <li>调用 Counter 组件的已注册 onclick 处理程序（IncrementCount 方法）。</li>
    <li>Counter 组件重新生成其呈现树。</li>
    <li>将新的呈现树与前一个呈现树进行比较。</li>
    <li>仅应用对文档对象模型 (DOM) 的修改。 显示的计数将会更新</li>
</ul>
<p>修改 Counter 组件的 C# 逻辑，使计数递增 2 而不是 1。</p>